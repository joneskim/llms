generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Student {
  id           String              @id @default(uuid())
  uniqueId     String              @unique
  name         String
  courses      Course[]            @relation("StudentCourses")
  quizResults  StudentQuizResult[]
  notifications Notification[]     @relation("StudentNotifications")
  readBy       ReadBy[]            @relation("ReadByStudent")
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  ReadBy ReadBy[]
}

model Teacher {
  id            String          @id @default(uuid())
  uniqueId      String          @unique
  name          String
  email         String          @unique
  password      String
  courses       Course[]
  notifications Notification[]  @relation("TeacherNotifications")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Course {
  id          String    @id @default(uuid())
  course_name String
  description String?
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  students    Student[] @relation("StudentCourses")
  modules     Module[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Module {
  id          String      @id @default(uuid())
  module_name String
  description String?
  courseId    String
  course      Course      @relation(fields: [courseId], references: [id])
  assignments Assignment[]
  quizzes     Quiz[]
  tasks       Task[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}



model Task {
  id        String   @id @default(uuid())
  taskName  String
  taskType  String
  dueDate   DateTime?
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assignment {
  id              String    @id @default(uuid())
  assignment_name String
  description     String?
  start_date      DateTime?
  due_date        DateTime?
  moduleId        String
  module          Module    @relation(fields: [moduleId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Quiz {
  id           String              @id @default(uuid())
  quiz_name    String
  description  String?
  start_date   DateTime?
  due_date     DateTime?
  moduleId     String
  module       Module              @relation(fields: [moduleId], references: [id])
  averageScore Float?
  results      StudentQuizResult[]
  questions    Question[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model Question {
  id            String         @id @default(uuid())
  text          String
  quizId        String
  quiz          Quiz           @relation(fields: [quizId], references: [id])
  options       Option[]
  answers       Answer[]
  correctAnswer CorrectAnswer?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Option {
  id         String   @id @default(uuid())
  text       String
  correct    Boolean  @default(false)  // Ensure this field exists
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model CorrectAnswer {
  id          String    @id @default(uuid())
  answerText  String
  questionId  String    @unique
  question    Question  @relation(fields: [questionId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model StudentQuizResult {
  id           String             @id @default(uuid())
  studentId    String
  student      Student            @relation(fields: [studentId], references: [id])
  quizId       String
  quiz         Quiz               @relation(fields: [quizId], references: [id])
  score        Int
  completedAt  DateTime           @default(now())
  answers      Answer[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@unique([studentId, quizId], name: "studentId_quizId")
}

model Answer {
  id           String             @id @default(uuid())
  answerText   String
  questionId   String
  question     Question           @relation(fields: [questionId], references: [id])
  quizResultId String
  quizResult   StudentQuizResult  @relation(fields: [quizResultId], references: [id])
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Notification {
  id           String      @id @default(uuid())
  message      String
  date         DateTime    @default(now())
  teacherId    String?
  studentId    String?
  teacher      Teacher?    @relation("TeacherNotifications", fields: [teacherId], references: [id])
  student      Student?    @relation("StudentNotifications", fields: [studentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  readBy       ReadBy[]
}

model ReadBy {
  id             String        @id @default(uuid())
  notificationId String
  studentId      String
  notification   Notification  @relation(fields: [notificationId], references: [id])
  student        Student       @relation(fields: [studentId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  Student Student[] @relation("ReadByStudent")
}
